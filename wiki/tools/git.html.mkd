
## git常用技巧收集
<!---date:2014-03-19-->

###打包某一tag版本 
 
```
 cd myproject #进入项目工作目录
 git tag      #查看tag
 git archive --format=tar --prefix=myproject/ tag_name |gzip > myproject.tar.gz
```

###小版本commit、回滚、合并

 * 建议每隔一小段代码就commit一次，快捷命令`git ci`（实际是`git commit -a -v`，对修改或删除文件进行stage，但新文件不会被跟踪，是用来省略`git add .`这个过程。在~/.gitconfig配置），这样完成一个功能就会commit多次。小版本commit好处是发现错误容易回滚回去，重新来过。
 * 版本回滚（即撤消）
    + 回滚单文件（未commit）：`git checkout filename`
    + 回滚所以修改文件(未commit)： `git throw` = `git reset --hard HEAD`
    + 回滚到上一个commit（已commit）： `git throwh` = `git reset --hard HEAD^`
 * 合并多个小版本

当多个小的commit完全一个功能性问题后(可以使用相同的commit信息用于后面区别、合并)，想要把这几个commit合并成一个具有代表性的commit。比如说合并3个commit，首先， `git rebase -i HEAD~~~`（或`git rebase -i HEAD~3`或`git rebase -i 版本号`），进入rebase界面，把除了第一`pick`，其他所有`pick`改为`s`，保存推出，又进入到了commit信息中，把几个commit信息删去只写一个commit信息用于总结这个功能，最后push到github上。

<http://happycasts.net/episodes/92>

###tig

`git commit ` 只追踪已提交文件，新创建文件需要先`git add`

`git commit -a` 可提交多行信息

`git commit -a -v` 还可以看到详细的修改内容

`git blame filename` 文件每一行修改历史

`tig` git前端，显示版本信息 `sudo apt-get install tig`。按`d`进入diff，`q`退出。

`tig filename` 单个文件的commit历史
`tig blame filename` 等价于`git blame filename`，但显示更好

<http://happycasts.net/episodes/4?autoplay=true>

###git diff

* diff

Linux系统自带的`diff`命令，查看两个比较类似的东西的差异，这两个东西可以分别是单个文件，也可以是目录（包含多个文件）。

```
diff -u file1 file2        #单文件
diff -Nurp dir1 dir2   #目录
```

* git diff

git有三个区：工作区、暂存区、git仓库。见图

![git三个重要分区](../../images/git_concept.jpg)

   + git仓库/目录对应 `.git`目录;
   + 工作区对应项目目录下除了`.git`的目录内所有内容;
   + 暂存区对应`.git/index`。

####git diff核心内容

 * `git diff` 用来查看我们在最新版本之上做的所有修改之中还没有放到 staging area 中的这部分，即工作区 .vs. Staging area。
 * `git diff --staged` 用来查看 staging area 中的内容，也就是下次将要被做到下个版本之中去的内容，等价于`git diff --cached`，即Staging area .vs. Repos。
 * `git diff HEAD` 以上两者之和，用来看总共的修改内容。

git最新的版本号（40位 sha1 哈希）,别名`HEAD`

 * `git diff one_commit_hash another_commit_hash` 查看新老两个版本之间的 diff
 * `git diff filename `或者 `git diff dirname/ `查看指定文件或目录的修改
 * `git diff one_branch_name another_branch_name` 对比两个分支之间的差异
